#!/bin/bash


# This script runs following a build of the target file system, $(TARGET_DIR).
#
# NOTE: In order for this script to execute the defconfig must point to it.
# For more information see:
#   http://buildroot.uclibc.org/downloads/manual/manual.html#rootfs-custom
# TODO: Maybe move the lists to a config file?
#-

targetdir=$1

echo "Mistify-OS post build script."
echo "PWD: `pwd`"
echo "Args: $*"
echo "BR2_CONFIG: $BR2_CONFIG"
echo "HOST_DIR: $HOST_DIR"
echo "STAGING_DIR: $STAGING_DIR"
echo "TARGET_DIR: $TARGET_DIR"
echo "BUILD_DIR: $BUILD_DIR"
echo "BINARIES_DIR: $BINARIES_DIR"
echo "BASE_DIR: $BASE_DIR"

#
# Install a symlink for /sbin/getty that points to /sbin/agetty.
# A lot of things expect /sbin/getty to be present.
#
if [ ! -f $targetdir/sbin/getty ]; then
  if [ -x $targetdir/sbin/agetty ]; then
    (cd $targetdir/sbin && ln -s agetty getty)
  fi
fi

#
# Remove /etc/init.d
#
if [ -d $targetdir/etc/init.d ]; then
  rm -rf $targetdir/etc/init.d
fi

#
# Clean out the /src directory
#
if [ -d $targetdir/src ]; then
  rm -rf $targetdir/src
fi

#
# Create a missing symlink for the UTC timezone
#
ln -sf Etc/UTC $targetdir/usr/share/zoneinfo/UTC

#
# Disable ISC DHCPD from starting up automatically
#
rm -f $targetdir/etc/systemd/system/multi-user.target.wants/dhcpd.service

#
# Disable named from starting up automatically
#
rm -f $targetdir/etc/systemd/system/multi-user.target.wants/named.service

#
# Replace /etc/os-release with a Mistify-relevant one. Format is documented at
# http://www.freedesktop.org/software/systemd/man/os-release.html
#
echo "Generating /etc/os-release..."
mistify_version=`(cd ../.. && git describe --abbrev=0 --tags)`
mistify_hashid=`(cd ../../ && git rev-parse HEAD)`
mistify_hashid_short=${mistify_hashid:0:8}

echo "    Mistify Version: $mistify_version"
echo "    Mistify Hash ID: $mistify_hashid"
echo "    Mistify Short Hash: $mistify_hashid_short"

cat > $targetdir/etc/os-release <<EOF
NAME="MistifyOS"
PRETTY_NAME="MistifyOS $mistify_version"
VERSION="$mistify_version"
ID="linux"
VERSION_ID="$mistify_hashid_short"
ANSI_COLOR="1;34"

HOME_URL="http://mistify.io/
SUPPORT_URL="http://mistify.io/
BUG_REPORT_URL="http://mistify.io/

MISTIFY_VARIANT="$MISTIFY_VARIANT"
MISTIFY_IMAGE_URL_BASE="http://builds.mistify.io/"
MISTIFY_IMAGE_URL_RELEASE="http://builds.mistify.io/releases/MistifyOS-release/"
MISTIFY_IMAGE_URL_NIGHTLY="http://builds.mistify.io/nightly/MistifyOS/"
MISTIFY_IMAGE_URL_GUESTS="http://builds.mistify.io/guest-images/"
EOF

#+
# If building a software development version then copy the needed development
# files from the staging dir. Buildroot, unfortunately, isn't very helpful
# with this.
#
# NOTE: This is pretty much a hack at the moment to get things working.
#-
if [ "$2" == "SDK" ]; then
    echo "Copying additional files to target fs."
    cp $STAGING_DIR/usr/lib/crt*.o $TARGET_DIR/usr/lib
    cp $STAGING_DIR/usr/lib/libc.so $TARGET_DIR/usr/lib
    cp $STAGING_DIR/usr/lib/libc_nonshared.a $TARGET_DIR/usr/lib
    cp -r $STAGING_DIR/usr/include $TARGET_DIR/usr
    ln -sf libgcc_s.so.1 $TARGET_DIR/usr/lib/libgcc.so
    #+
    # This is definitely a hack. The normal ld doesn't support the
    # options gcc demands.
    #-
    for f in ar ld nm objdump ranlib strip; do
        echo "Copying $f to usr/bin"
        cp $TARGET_DIR/usr/x86_64-buildroot-linux-gnu/bin/$f $TARGET_DIR/usr/bin
    done
    #+
    # WARNING: insanity ahead
    #
    # OK now this is a serious hack. The build target path is embedded into config
    # files and more. This especially causes strange failures with both perl and
    # python. To work around this problem create a symlink in the target fs.
    #-
    mkdir -p $TARGET_DIR/$TARGET_DIR
    ln -sf /usr $TARGET_DIR/$TARGET_DIR
    mkdir -p $TARGET_DIR/$HOST_DIR
    ln -sf /usr $TARGET_DIR/$HOST_DIR
    #+
    # Another serious hack.
    # In order to run the config for crosstool-ng perl needs to support threads.
    # Thread support has been removed from the latest versions of perl. There
    # is a forks module which will install threads emulation --BUT-- the option
    # to do so is available only if the installed perl doesn't support threads.
    # The host install of perl does support threads -- thus the catch. To deal
    # with this a workaround is to have the target install the forks module but
    # that requires the perl headers.
    #-
    echo STAGING_DIR: $STAGING_DIR
    echo TARGET_DIR: $TARGET_DIR
    s=$STAGING_DIR/usr/lib/perl5
    d=$TARGET_DIR/usr/lib/perl5
    echo Source directory: $s
    echo Destination directory: $d
    rm -rf $d
    cp -r $s $d
    #+
    # libm needs to be copied. It's not installed in the target for
    # some odd reason. The correct way to do this would be to mod the
    # install but for now...
    #-
    cp $STAGING_DIR/usr/lib/libm.* $TARGET_DIR/usr/lib
    #+
    # Some components assume libraries in usr/lib yet they are installed in
    # /lib. A short term work-around is to create symlinks.
    #-
    ln -sf /lib/libpthread.so.0 $TARGET_DIR/usr/lib/libpthread.so

    #+
    # Some more symlinks for minor link problems.
    #-
    cp -P $TARGET_DIR/lib/libdl.so.2 $TARGET_DIR/lib/libdl.so


fi

