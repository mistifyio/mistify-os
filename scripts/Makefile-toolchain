#+
# Some helpful macros.
#-
this_makefile = $(notdir $(lastword $(MAKEFILE_LIST)))

define message
  $(info $(this_makefile): $(1))
endef

define warn
  $(warning $(this_makefile) warning: $(1))
endef

define err
  $(warning $(this_makefile) error: $(1))
endef

define die
  $(error $(this_makefile): $(1))
endef

#+
# This make file is designed to be called from the buildmistify
# install-toolchain.sh script but can also be used from the command line.
# It performs all the steps needed to clone the toolchain source from a git
# repo (typically github) and build the final toolchain.
# Parameters are passed from the buildmistify script on the make command line
# as variable definitins which override the following variables. For consistency,
# the variable names are those used by the buildmistify script.
# To simplify use directly from the command line meaningful default values are
# provided. The buildmistify help describes the meaning of each of these variables.
#-
$(call message, $(shell pwd))
tcuri = git@github.com:mistifyio/crosstool-ng.git
$(call message, "tcuri = $(tcuri)" )
toolchaindir = $(shell pwd)/toolchain
$(call message, "toolchaindir = $(toolchaindir)" )
toolchainprefix = x86_64-unknown-linux-gnu
$(call message, "toolchainprefix = $(toolchainprefix)" )
toolchaininstallprefix = toolchain
$(call message, "toolchaininstallprefix = $(toolchaininstallprefix)" )
toolchainversion = glibc-multilib-sdk
$(call message, "toolchainversion = $(toolchainversion)" )
variant = base
$(call message, "variant = $(variant)" )
tcartifacturi = https://s3.amazonaws.com/omniti-mystify-artifacts/toolchain-artifacts
$(call message, "tcartifacturi = $(tcartifacturi)" )
tcconfig = $(shell pwd)/configs/mistify-tc-multilib.config
$(call message, "tcconfig = $(tcconfig)" )
downloaddir = $(shell pwd)/downloads
$(call message, "downloaddir = $(downloaddir)" )
verbose = n
$(call message, "verbose = $(verbose)" )

#+
# Internal variables derived from the buildmistify commandline variables and
# passed to this makefile by the buildmistify:install-toolchain.sh script.
#-
toolchain_name_prefix=crosstool-ng
$(call message, "toolchain_name_prefix = $(toolchain_name_prefix)")
toolchain_base_name = $(toolchain_name_prefix)-$(toolchainprefix)-$(toolchainversion)-$(variant)
$(call message, "toolchain_base_name = $(toolchain_base_name)")
toolchain_tar_file = $(toolchain_base_name).tgz
$(call message, "toolchain_tar_file = $(toolchain_tar_file)")
toolchainartifact_url = $(tcartifacturi)/$(toolchain_tar_file)
$(call message, "toolchainartifact_url = $(toolchainartifact_url)")
toolchain_variation_dir = $(toolchaindir)/build-$(toolchain_base_name)
$(call message, "toolchain_variation_dir = $(toolchain_variation_dir)")
toolchain_install_dir = $(toolchaindir)/$(toolchain_base_name)
$(call message, "toolchain_install_dir = $(toolchain_install_dir)")

toolchain_target_file = $(toolchain_install_dir)/bin/$(toolchainprefix)-gcc

define run_in_tc_dir
  if [ -d $(toolchain_variation_dir) ]; then cd $(toolchain_variation_dir) && $(1); fi
endef

.Phony: build clean fullclean dist distclean version tagformat

all: $(downloaddir)/$(toolchain_tar_file)

$(tcconfig):;

$(config_status_file):;

$(toolchain_variation_dir):
	git clone $(tcuri) $(toolchain_variation_dir)

$(toolchain_variation_dir)/.toolchainversion.$(toolchainversion): \
  $(toolchain_variation_dir)
	$(call run_in_tc_dir, \
		git fetch)
	$(call run_in_tc_dir, \
		git checkout $(toolchainversion))
	$(call run_in_tc_dir, \
		git symbolic-ref --short HEAD && \
		if [ $$? -eq 0 ]; then \
			echo "Updating from branch: $(toolchainversion)"; \
			git pull; \
		fi)
	touch $@

$(downloaddir):
	mkdir -p $(downloaddir)

$(toolchain_variation_dir)/.config: $(tcconfig) \
  $(toolchain_variation_dir)/.toolchainversion.$(toolchainversion)
	cp $< $@
	rm -rf $(toolchain_install_dir)

$(toolchain_variation_dir)/configure: $(toolchain_variation_dir)/.config
	$(call run_in_tc_dir, ./bootstrap )

#+
# The toolchain makefile needs to be modified because it is being called
# from this makefile. A variable is used here for two reasons. One, it's
# easier to maintain the pattern and two, it can be overriden if necessary.
#-
fix_makefile_pattern = s/MAKELEVEL),0/MAKELEVEL),1/g
$(toolchain_variation_dir)/Makefile: $(toolchain_variation_dir)/configure
	$(call run_in_tc_dir, ./configure --enable-local)
	$(call run_in_tc_dir, \
	  sed -i.bak '$(fix_makefile_pattern)' Makefile \
	)

$(toolchain_variation_dir)/ct-ng: $(toolchain_variation_dir)/Makefile
	$(call run_in_tc_dir, make)

$(toolchain_target_file): $(toolchain_variation_dir)/ct-ng
	$(call run_in_tc_dir, \
	export TC_ARCH_SUFFIX=-$(toolchainversion); \
	export TC_PREFIX=$(toolchainprefix); \
	export TC_PREFIX_DIR=$(toolchain_install_dir); \
	export TC_LOCAL_TARBALLS_DIR=$(downloaddir); \
	./ct-ng build \
	)

$(downloaddir)/$(toolchain_tar_file): $(toolchain_target_file)
	mkdir -p $(@D)
	tar cvzf $@ -C $(toolchaindir) $(toolchain_base_name)

build: $(toolchain_target_file)

dist: $(downloaddir)/$(toolchain_tar_file)

clean:
	-rm -rf $(toolchain_install_dir)
	$(call run_in_tc_dir, \
	  if [ -f ct-ng ]; then ./ct-ng distclean; fi)

distclean: clean
	-rm -f $(downloaddir)/$(toolchain_tar_file)

fullclean:
	-rm -rf $(toolchain_variation_dir)

toolchain-menuconfig: $(toolchain_variation_dir)/ct-ng
	$(call run_in_tc_dir, \
	  ./ct-ng menuconfig)

version:
	@echo $(toolchainversion)

tagformat:
	@echo $(toolchain_base_name)
