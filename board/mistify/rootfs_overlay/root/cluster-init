#!/usr/bin/env bash

set -e

function out() {
    tee /proc/self/fd/3 | systemd-cat -t cluster-init-out
}
function err() {
    tee /proc/self/fd/3 | systemd-cat -t cluster-init-err
}

exec 3>&2
exec 1> >(out)
exec 2> >(err)

source $(dirname $0)/cluster-init-config
NODE_COUNT=${#uuids[*]}
IP0=${ips[0]}
UUID0=${uuids[0]}

function main() {
    log "begin"

    configure_network

    log "stopping nconfigd to avoid races"
    systemctl stop nconfigd
    log "done"

    configure_hypervisor_services
    configure_hypervisor_metadata
    
    configure_global_etcd

    update_hypervisor0_etcd

    log "starting nconfigd"
    nconfigd --once
    log "done"

    log "checking for kernel/initrd file existence"
    do_until 5 ls -l /var/lib/images/0.1.0/{vmlinuz,initrd}
    log "done"

    log "adding other hypervisors"
    local i
    for (( i=1; i < $NODE_COUNT; i++ )); do
        add_hypervisor $i
    done
    log "done"

    set_resolv

    log "end"
}

function log() {
    local msg="$@"
    local time=$(date +"%T")
    local max_index=$((${#FUNCNAME[*]} - 3))
    local stack=
    local i
    for (( i=1; i<=$max_index; i++)); do
        stack="[ ${FUNCNAME[$i]}:${BASH_LINENO[$i]} ]$stack"
    done
    echo "[ $time ]$stack $msg"
}

function do_until() {
    local t=$1
    local cmd=$2
    shift 2
    local i=0
    log "begin: Interval: ${t}s, Command: $cmd $@"
    until $cmd "$@"; do
        sleep $t
        log "$((++i * $t))s elapsed"
    done
    log "end"
}

function configure_network() {
    log "begin"
    rm -f /etc/systemd/network/*

    cat > /etc/systemd/network/mistify0.network <<EOF
    [Match]
    Name=mistify0

    [Network]
    DNS=127.0.0.1
    Address=$IP0/$nm
    Gateway=$gw
EOF

    cat > /etc/resolv.conf <<EOF
    nameserver 127.0.0.1
EOF

    systemctl restart systemd-networkd
    log "end"
}

function configure_hypervisor_services() {
    log "begin"

    log "setting values in etcd"
    etcdctl set /lochness/hypervisors/$UUID0/config/dhcpd true
    etcdctl set /lochness/hypervisors/$UUID0/config/cbootstrapd true
    etcdctl set /lochness/hypervisors/$UUID0/config/tftpd true

    local i
    for (( i=0; i < $NODE_COUNT; i++ )); do
        local uuid=${uuids[$i]}
        etcdctl set /lochness/hypervisors/$uuid/config/dns true
        etcdctl set /lochness/hypervisors/$uuid/config/etcd true
    done
    log "done"

    log "running nconfigd once to process hypervisor service configs"
    nconfigd --once && systemctl stop nconfigd
    dig +short dns.services.lochness.local @127.0.0.1 -p 15353 || log "dns failed, continuing anyway"
    log "done"

    log "end"
}

function configure_hypervisor_metadata() {
    log "begin"

    log "setting values in etcd"
    local i
    for (( i=0; i < $NODE_COUNT; i++ )); do
        local uuid=${uuids[$i]}
        local ip=${ips[$i]}
        local mac=${macs[$i]}
        local metadata=$(printf \
            '{"id":"%s","ip":"%s","netmask":"255.255.255.0","gateway":"%s","mac":"%s"}' \
            $uuid $ip $gw $mac)
        etcdctl set /lochness/hypervisors/$uuid/metadata "$metadata"
    done
    log "done"

    log "running nconfigd once to process hypervisor configs"
    nconfigd --once && systemctl stop nconfigd
    log "done"

    log "end"
}

function get_peer_url() {
    echo "http://${ips[$1]}:2380"
}

function configure_global_etcd() {
    log "begin"
    etcdctl set /lochness/config/ETCD_INITIAL_CLUSTER_STATE "existing"
    etcdctl set /lochness/config/ETCD_HEARTBEAT_INTERVAL $ETCD_HEARTBEAT_INTERVAL
    etcdctl set /lochness/config/ETCD_ELECTION_TIMEOUT $ETCD_ELECTION_TIMEOUT
    log "end"
}

function configure_hypervisor_etcd() {
    log "begin"

    local index=$1
    local uuid=${uuids[$index]}
    local ip=${ips[$index]}
    local peer_url=$(get_peer_url $index)
    local initial_cluster=
    local i
    for i in $(seq 0 $index); do
        local sep=
        if [ $i -ne 0 ]; then
            sep=","
        fi
        local pu=$(get_peer_url $i)
        initial_cluster="$initial_cluster$sep${uuids[$i]}=$pu"
    done

    local config_path="/lochness/hypervisors/$uuid/config"

    log "setting values in etcd"
    etcdctl set $config_path/NCONFIGD_ETCD_ADDRESS "http://$IP0:4001"
    etcdctl set $config_path/ETCD_NAME "$uuid"
    etcdctl set $config_path/ETCD_INITIAL_CLUSTER "$initial_cluster"
    etcdctl set $config_path/ETCD_INITIAL_ADVERTISE_PEER_URLS "$peer_url"
    etcdctl set $config_path/ETCD_ADVERTISE_CLIENT_URLS "http://$ip:2379,http://$ip:4001"
    etcdctl set $config_path/ETCD_LISTEN_CLIENT_URLS "http://$ip:2379,http://$ip:4001,http://localhost:2379,http://localhost:4001"
    etcdctl set $config_path/ETCD_LISTEN_PEER_URLS "$peer_url"
    log "done"

    log "end"
}

function update_hypervisor0_etcd {
    log "begin"

    configure_hypervisor_etcd 0

    log "retrieving etcd configuration"
    curl -s http://localhost:8888/config/$IP0 > /tmp/mistify-config
    log "done"

    log "restarting etcd"
    systemctl restart etcd
    do_until 5 etcdctl cluster-health
    log "done"

    # Update the peerURLS using the member API
    # This is an existing member of the 1-node cluster, so it needs to be done
    # this way.
    log "fixing peerURL"
    local peer_url=$(get_peer_url 0)
    local memberid=$(curl -s http://localhost:4001/v2/members | grep -Po '"id":"\K[^"]*')
    if [ -z $memberid ]; then
        exit 1
    fi
    log "member id: $memberid"
    curl -s "http://localhost:2379/v2/members/$memberid" -XPUT \
        -H "content-type: application/json" \
        -d '{"peerURLS":["'$peer_url'"]}'
    log "done"

    log "end"
}

function add_hypervisor() {
    log "begin"

    local index=$1
    local uuid=${uuids[$index]}
    local ip=${ips[$index]}

    configure_hypervisor_etcd $index

    log "adding hypervisor via etcdctl"
    etcdctl member add $uuid "http://$ip:2380"
    log "done"

    log "waiting for hypervisor. please start node$index"
    do_until 5 curl --silent http://${ips[$index]}:4001/v2/keys
    do_until 5 etcdctl cluster-health
    log "done"

    log "end"
}

function set_resolv() {
    log "begin"

    {
        local i
        for (( i=0; i < $NODE_COUNT; i++ )); do
            echo "nameserver ${ips[$i]}"
        done
    } > /etc/resolv.conf

    log "end"
}

# Run the script
main
